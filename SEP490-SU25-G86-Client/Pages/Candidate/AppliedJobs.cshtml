@page
@model SEP490_SU25_G86_Client.Pages.AppliedJobs.AppliedJobsModel
@using SEP490_SU25_G86_API.vn.edu.fpt.DTO.AppliedJobDTO
@{
    ViewData["Title"] = "Applied Jobs";
    var userId = HttpContext.Session.GetString("userId");
    var jwtToken = HttpContext.Session.GetString("jwt_token");
    List<AppliedJobDTO> filteredJobs;
    if (Model.StatusFilter == "Hồ sơ đã rút")
    {
        filteredJobs = Model.AppliedJobs.Where(j => j.Status == "Hồ sơ đã rút" && j.IsDelete == true).ToList();
    }
    else if (!string.IsNullOrEmpty(Model.StatusFilter))
    {
        filteredJobs = Model.AppliedJobs.Where(j => (j.IsDelete == false || j.IsDelete == null) && j.Status == Model.StatusFilter).ToList();
    }
    else
    {
        filteredJobs = Model.AppliedJobs;
    }
}
<script>
    window.savedJobIds = [@(string.Join(",", Model.SavedJobs?.Select(j => j.JobPostId) ?? new List<int>()))];
    function renderBookmarkState(jobPostId) {
        var isSaved = window.savedJobIds.includes(jobPostId);
        var icon = document.getElementById('bookmark-icon-' + jobPostId);
        var label = document.getElementById('bookmark-label-' + jobPostId);
        if (icon && label) {
            if (isSaved) {
                icon.className = 'bi bi-bookmark-fill text-success';
                label.innerText = ' Đã lưu';
            } else {
                icon.className = 'bi bi-bookmark';
                label.innerText = ' Lưu';
            }
        }
    }

    function toggleSaveJob(btn) {
        var jobPostId = parseInt(btn.getAttribute('data-job-id'));
        var isSaved = window.savedJobIds.includes(jobPostId);
        if (!window.userId || !window.jwtToken) {
            alert('Bạn cần đăng nhập để sử dụng chức năng này!');
            return;
        }
        if (!isSaved) {
            // Save job
            fetch(`https://localhost:7004/api/SavedJobs/save`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + window.jwtToken
                },
                body: JSON.stringify({ jobPostId: jobPostId, userId: window.userId })
            })
            .then(res => res.json())
            .then(data => {
                if(data.message && data.message.includes('success')) {
                    window.savedJobIds.push(jobPostId);
                    renderBookmarkState(jobPostId);
                } else {
                    alert(data.message || 'Không thể lưu việc làm.');
                }
            })
            .catch(() => alert('Lỗi khi lưu việc làm!'));
        } else {
            // Unsave job
            // Cần lấy saveJobId, tạm thời gọi API xóa theo userId/jobPostId nếu backend hỗ trợ, nếu không phải lấy saveJobId từ danh sách
            fetch(`https://localhost:7004/api/SavedJobs/user/${window.userId}`,
                { headers: { 'Authorization': 'Bearer ' + window.jwtToken } })
            .then(res => res.json())
            .then(jobs => {
                var saved = jobs.find(j => j.jobPostId === jobPostId);
                if (saved && saved.saveJobId) {
                    fetch(`https://localhost:7004/api/SavedJobs/${saved.saveJobId}`, {
                        method: 'DELETE',
                        headers: { 'Authorization': 'Bearer ' + window.jwtToken }
                    })
                    .then(r => {
                        if (r.status === 204) {
                            window.savedJobIds = window.savedJobIds.filter(id => id !== jobPostId);
                            renderBookmarkState(jobPostId);
                        } else {
                            alert('Không thể bỏ lưu việc làm!');
                        }
                    });
                } else {
                    alert('Không tìm thấy việc làm đã lưu!');
                }
            });
        }
    }
    // Render trạng thái bookmark khi trang load
    window.addEventListener('DOMContentLoaded', function() {
        (window.savedJobIds || []).forEach(function(jobId) {
            renderBookmarkState(jobId);
        });
        // Render cho tất cả job suggestion
        document.querySelectorAll('.save-job-btn').forEach(function(btn) {
            var jobId = parseInt(btn.getAttribute('data-job-id'));
            renderBookmarkState(jobId);
        });
    });
</script>
<style>
    .hover-bg-light:hover {
        background-color: #f8f9fa !important;
        transition: background-color 0.2s ease-in-out;
    }
    
    .hover-text-primary:hover {
        color: #0d6efd !important;
        transition: color 0.2s ease-in-out;
    }
    
    .job-card {
        transition: all 0.2s ease-in-out;
    }
    
    .job-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08) !important;
    }
    
    .btn-sm {
        padding: 0.35rem 0.75rem;
        font-size: 0.85rem;
    }
    
    .badge {
        font-weight: 500;
        padding: 0.4em 0.8em;
    }
    
    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
<script>
    window.userId = '@userId';
    window.jwtToken = '@jwtToken';
</script>

<section class="py-4" style="background-color: #f5f7fa;">
    <div class="container">
        <div class="row g-4">
            <div class="col-lg-8">
                <div class="card border-0 shadow-sm rounded-3 overflow-hidden">
                    <div class="card-header bg-white py-3 border-bottom">
                        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center">
                            <div class="mb-2 mb-md-0">
                                <h1 class="h5 fw-bold mb-1 text-primary">Việc làm đã ứng tuyển</h1>
                                <p class="text-muted small mb-0">
                                    <i class="bi bi-info-circle me-1"></i> Theo dõi trạng thái hồ sơ ứng tuyển của bạn
                                </p>
                            </div>
                            <form method="get" class="d-flex align-items-center">
                                <div class="input-group input-group-sm" style="width: 220px;">
                                    <span class="input-group-text bg-white border-end-0"><i class="bi bi-funnel"></i></span>
                                    <select class="form-select border-start-0 ps-1" name="StatusFilter" onchange="this.form.submit()">
                                        <option value="">Tất cả trạng thái</option>
                                        @foreach (var kv in Model.StatusMap)
                                        {
                                            <option value="@kv.Key" selected="@(Model.StatusFilter == kv.Key)">@kv.Value</option>
                                        }
                                    </select>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (filteredJobs.Any())
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var job in filteredJobs)
                                {
                                    string badgeClass = "bg-secondary";
                                    string statusText = Model.StatusMap.ContainsKey(job.Status ?? "") ? Model.StatusMap[job.Status ?? ""] : (job.Status ?? "");
                                    switch (job.Status ?? "")
                                    {
                                        case "Đã ứng tuyển": badgeClass = "bg-primary"; break;
                                        case "ĐÃ DUYỆT": badgeClass = "bg-success"; break;
                                        case "ĐÃ TỪ CHỐI": badgeClass = "bg-danger"; break;
                                        case "Hồ sơ đã rút": badgeClass = "bg-dark"; break;
                                    }

                                    <div class="list-group-item border-0 p-4 hover-bg-light">
                                        <div class="d-flex flex-column flex-md-row">
                                            <!-- Company Logo -->
                                            <div class="me-md-4 mb-3 mb-md-0 flex-shrink-0" style="width: 80px; height: 80px;">
                                                <img src="@(string.IsNullOrEmpty(job.CompanyLogoUrl) ? Url.Content("~/assets/company-placeholder.png") : job.CompanyLogoUrl)"
                                                     alt="@job.CompanyName"
                                                     class="img-fluid rounded border"
                                                     style="width: 100%; height: 100%; object-fit: contain; background: white; padding: 4px;">
                                            </div>
                                            
                                            <!-- Job Info -->
                                            <div class="flex-grow-1">
                                                <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-start mb-2">
                                                    <div class="me-3">
                                                        <h5 class="mb-1 fw-semibold text-truncate" style="max-width: 100%;">
                                                            <a href="/Job/DetailJobPost/@job.JobPostId" class="text-decoration-none text-dark hover-text-primary">@job.Title</a>
                                                        </h5>
                                                        <div class="d-flex align-items-center flex-wrap gap-2 mb-2">
                                                            <span class="text-muted small">
                                                                <i class="bi bi-building me-1"></i>@job.CompanyName
                                                            </span>
                                                            <span class="text-muted small d-none d-md-inline">•</span>
                                                            <span class="text-success small fw-medium">
                                                                <i class="bi bi-cash-coin me-1"></i>@(string.IsNullOrEmpty(job.Salary) ? "Thỏa thuận" : job.Salary)
                                                            </span>
                                                        </div>
                                                    </div>
                                                    <span class="badge @badgeClass align-self-start mb-2 mb-md-0">@statusText</span>
                                                </div>
                                                
                                                <div class="d-flex flex-wrap gap-2 align-items-center mb-3">
                                                    <span class="text-muted small">
                                                        <i class="bi bi-geo-alt me-1"></i>@job.WorkLocation
                                                    </span>
                                                    <span class="text-muted small d-none d-md-inline">•</span>
                                                    <span class="text-muted small">
                                                        <i class="bi bi-calendar-check me-1"></i>@(job.SubmissionDate?.ToString("dd/MM/yyyy") ?? "N/A")
                                                    </span>
                                                </div>
                                                
                                                <div class="d-flex flex-wrap gap-2">
                                                    <a href="/Job/DetailJobPost/@job.JobPostId" class="btn btn-outline-primary btn-sm">
                                                        <i class="bi bi-eye me-1"></i>Xem chi tiết
                                                    </a>
                                                    @if (!string.IsNullOrEmpty(job.CvFileUrl))
                                                    {
                                                        <a href="@job.CvFileUrl" class="btn btn-outline-secondary btn-sm" target="_blank">
                                                            <i class="bi bi-file-earmark-pdf me-1"></i>Xem CV
                                                        </a>
                                                    }
                                                    @if (job.Status != "Hồ sơ đã rút")
                                                    {
                                                        <button class="btn btn-outline-danger btn-sm" onclick="withdrawApplication(@job.SubmissionId)">
                                                            <i class="bi bi-x-circle me-1"></i>Rút đơn
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <hr class="my-0" />
                                 
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5 px-3">
                                <div class="d-flex justify-content-center mb-3">
                                    <div class="bg-light rounded-circle p-4">
                                        <i class="bi bi-inbox text-muted" style="font-size: 2.5rem;"></i>
                                    </div>
                                </div>
                                <h5 class="mb-2">Chưa có đơn ứng tuyển nào</h5>
                                <p class="text-muted mb-4">Bạn chưa ứng tuyển vào công việc nào. Hãy tìm kiếm và ứng tuyển ngay!</p>
                                <a href="/Common/ListJobs" class="btn btn-primary">
                                    <i class="bi bi-search me-2"></i>Tìm việc ngay
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card border-0 shadow-sm rounded-3 mb-4">
                    <div class="card-header bg-white py-3 border-bottom">
                        <h5 class="mb-0 fw-bold">
                            <i class="bi bi-lightbulb me-2 text-warning"></i>Gợi ý việc làm phù hợp
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (Model.SuggestedJobs.Any())
                        {
                            @foreach (var job in Model.SuggestedJobs)
                            {
                                <div class="mb-3 p-3 border rounded bg-white hover-shadow" style="transition:box-shadow .2s; overflow: hidden;">
                                    <div class="d-flex" style="width: 100%;">
                                        <!-- Company Logo -->
                                        <div class="flex-shrink-0 me-3" style="width: 64px;">
                                            <div class="bg-light rounded d-flex align-items-center justify-content-center" style="width: 100%; height: 64px;">
                                                <img src="@(string.IsNullOrEmpty(job.CompanyLogoUrl) ? Url.Content("~/assets/company-placeholder.png") : job.CompanyLogoUrl)" 
                                                     alt="@job.CompanyName" 
                                                     class="img-fluid" 
                                                     style="max-width: 100%; max-height: 48px; object-fit: contain; padding: 4px;">
                                            </div>
                                        </div>
                                        
                                        <!-- Job Info -->
                                        <div class="flex-grow-1" style="min-width: 0; max-width: calc(100% - 80px);">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div style="max-width: calc(100% - 90px);">
                                                    <a href="/Job/DetailJobPost/@job.JobPostId" class="text-decoration-none text-dark">
                                                        <div class="fw-bold text-truncate">@job.Title</div>
                                                        <div class="text-muted small text-truncate">@job.CompanyName</div>
                                                    </a>
                                                </div>
                                                <div class="ms-2" style="width: 80px; flex-shrink: 0;">
                                                    <button class="btn btn-outline-success btn-sm w-100 save-job-btn"
                                                            data-job-id="@job.JobPostId"
                                                            onclick="toggleSaveJob(this)"
                                                            style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                        <i class="bi" id="bookmark-icon-@job.JobPostId"></i>
                                                        <span id="bookmark-label-@job.JobPostId">Lưu</span>
                                                    </button>
                                                </div>
                                            </div>
                                            
                                            <!-- Location and Salary -->
                                            <div class="d-flex flex-wrap justify-content-between align-items-center mt-2">
                                                <div class="text-muted small">
                                                    <i class="bi bi-geo-alt"></i> @(job.Location ?? "N/A")
                                                </div>
                                                <div class="text-success fw-medium small">
                                                    @(string.IsNullOrEmpty(job.Salary) ? "Thỏa thuận" : job.Salary)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-muted">Không có gợi ý việc làm phù hợp.</div>
                        }
                    </div>
                </div>
            </div>
        </div>
</section>

<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js">    function saveJob(jobPostId) {
        if (!window.userId || !window.jwtToken) {
            alert('Bạn cần đăng nhập để sử dụng chức năng này!');
            return;
        }
        fetch(`https://localhost:7004/api/SavedJobs/save`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + window.jwtToken
            },
            body: JSON.stringify({ jobPostId: jobPostId, userId: window.userId })
        })
        .then(res => res.json())
        .then(data => {
            if(data.success || data.status === 'success') {
                alert('Đã lưu việc làm!');
            } else {
                alert(data.message || 'Không thể lưu việc làm.');
            }
        })
        .catch(() => alert('Lỗi khi lưu việc làm!'));
    }
</script>
<script>
    function withdrawApplication(submissionId) {
        if (!confirm('Bạn chắc chắn muốn rút đơn ứng tuyển này?')) return;
        // Lấy userId từ biến toàn cục hoặc session
        fetch(`https://localhost:7004/api/AppliedJobs/withdraw/${submissionId}?userId=${window.userId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': 'Bearer ' + window.jwtToken
            }
        })
        .then(res => res.json())
        .then(data => {
            alert(data.message || 'Đã rút đơn ứng tuyển!');
            location.reload();
        })
        .catch(() => alert('Lỗi khi rút đơn ứng tuyển!'));
    }
    function saveJob(jobPostId) {
        if (!window.userId || !window.jwtToken) {
            alert('Bạn cần đăng nhập để sử dụng chức năng này!');
            return;
        }
        fetch(`https://localhost:7004/api/SavedJobs/save`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + window.jwtToken
            },
            body: JSON.stringify({ jobPostId: jobPostId, userId: window.userId })
        })
        .then(res => res.json())
        .then(data => {
            if(data.success || data.status === 'success') {
                alert('Đã lưu việc làm!');
            } else {
                alert(data.message || 'Không thể lưu việc làm.');
            }
        })
        .catch(() => alert('Lỗi khi lưu việc làm!'));
    }
</script> 