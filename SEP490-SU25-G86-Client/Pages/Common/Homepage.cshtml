@page
@model SEP490_SU25_G86_Client.Pages.HomepageModel
@{
    var token = HttpContext.Request.Query["token"];
}
<script>
    const urlToken = '@token';
    if (urlToken && urlToken !== 'null' && urlToken !== '') {
        localStorage.setItem('jwt_token', urlToken);
        // Xóa token khỏi url bằng cách reload lại không query
        window.location.href = window.location.pathname;
    }
</script>
@{
    var selectedRegion = HttpContext.Request.Query["region"].ToString()?.Trim();

}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>CVMatcher - Homepage</title>

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
@*     <link rel="stylesheet" href="~/SEP490_SU25_G86_Client.styles.css" asp-append-version="true" /> *@
    <link rel="stylesheet" href="~/css/home.css" asp-append-version="true" />

</head>
<body>
    <!-- Hero Search Section -->
    <section class="bg-dark py-5">
        <div class="container mt-5">
            <form method="get" action="/Common/ListJobs" class="d-flex bg-white shadow"
                  style="border-radius: 8px; overflow: hidden; max-width: 900px; margin: auto;">

                <!-- Job title input -->
                <input name="keyword" type="text" class="form-control border-0 px-3"
                       placeholder="Vị trí tuyển dụng" style="flex: 0 0 65%;" />

                <!-- Vertical divider -->
                <div style="width:1px; background-color:#dee2e6;"></div>

                <!-- Location dropdown (mapped to provinceId) -->
                <select class="form-select border-0 px-3" name="provinceId" style="flex: 0 0 20%;">
                    <option selected value="">Vị trí</option>
                    @foreach (var province in Model.Provinces)
                    {
                        <option value="@province.ProvinceId">@province.ProvinceName</option>
                    }
                </select>

                <!-- Search button -->
                <button type="submit" class="btn btn-custom text-white px-3"
                        style="flex: 0 0 15%; border-radius: 0;">
                    <i class="bi bi-search me-1"></i> Tìm kiếm
                </button>
            </form>
        </div>
    </section>

    <!-- Job Listings -->
    <section class="py-5 custom-bg">
        <div class="container">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-bold">Việc Làm Mới Nhất</h2>
                <span>@Model.TotalItems jobs</span>
                <a href="/Common/ListJobs" class="text-custom">View all</a>
            </div>

            <!-- Filters -->
            <div class="d-flex gap-2 mb-4 flex-wrap align-items-start">
                <div class="filter-dropdown-wrapper position-relative">
                    <button id="filterToggle" class="btn filter-btn d-flex align-items-center justify-content-between" type="button" aria-expanded="false">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-filter me-2 text-muted"></i>
                            <span class="text-muted me-2">Lọc theo:</span>
                            <span id="selectedFilterLabel" class="fw-semibold">Vị trí</span>
                        </div>
                        <i id="filterCaret" class="bi bi-chevron-down caret-icon"></i>
                    </button>

                    <div id="filterMenu" class="custom-filter-menu shadow-sm" role="menu" aria-hidden="true">
                        <button class="dropdown-item d-flex justify-content-between align-items-center" data-value="region">Địa điểm <i class="bi bi-check"></i></button>
                        <button class="dropdown-item d-flex justify-content-between align-items-center" data-value="salary">Mức lương <i class="bi bi-check"></i></button>
                        <button class="dropdown-item d-flex justify-content-between align-items-center" data-value="experience">Kinh nghiệm <i class="bi bi-check"></i></button>
                    </div>
                </div>

                <div id="dynamicFilters" style="min-width: 300px;"></div>
            </div>

            @if (!Model.JobPosts.Any())
            {
                <p class="text-muted">No job posts available.</p>
            }
            else
            {
                <div class="row">
                    @foreach (var job in Model.JobPosts)
                    {
                        <div class="col-md-4 mb-4">
                            <div class="card job-card shadow-sm rounded-4 p-3">
                                <h5 class="fw-bold">@job.Title</h5>
                                <p class="mb-1">
                                    <a href="/Common/CompanyDetail?id=@job.CompanyId" class="text-muted text-decoration-none">
                                        @job.CompanyName
                                    </a>
                                </p>
                                <p class="text-muted mb-1">@job.Location</p>
                                <div class="d-flex align-items-center justify-content-between mt-3">
                                    <span class="text-custom fw-bold">@job.FormattedSalary</span>
                                    <a class="btn btn-primary btn-sm" href="/Job/DetailJobPost/@job.JobPostId">Chi tiết</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <div class="d-flex justify-content-center mt-4">
                    <nav>
                        <ul class="pagination">
                            @if (Model.CurrentPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="?page=@(Model.CurrentPage - 1)@(Model.Region != null ? $"&region={Model.Region}" : "")">←</a>
                                </li>
                            }

                            <li class="page-item disabled">
                                <span class="page-link">@Model.CurrentPage / @Model.TotalPages</span>
                            </li>

                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="?page=@(Model.CurrentPage + 1)@(Model.Region != null ? $"&region={Model.Region}" : "")">→</a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
    </section>


    <!-- Popular Categories -->
    <section class="bg-white py-5">
        <div class="container text-center">
            <h2 class="fw-bold mb-4">Nghề nghiệp phổ biến</h2>
            <div class="row g-3">
                @{
                    var categories = new[] {
                                "Chăm sóc khách hàng", "Marketing", "Kinh doanh - Bán hàng", "Bất động sản - Xây dựng",
                                "Khách sạn - Du lịch", "Giáo dục", "Tài chính - Ngân hàng", "Dịch vụ"
                                };
                    foreach (var cat in categories)
                    {
                        <div class="col-6 col-md-3">
                            <div class="border rounded py-3 bg-light fw-medium">
                                @cat
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </section>
    <!-- Bootstrap JS CDN -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
</body>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const filterToggle = document.getElementById("filterToggle");
        const filterMenu = document.getElementById("filterMenu");
        const selectedLabel = document.getElementById("selectedFilterLabel");
        const dynamicFilters = document.getElementById("dynamicFilters");
        const urlParams = new URLSearchParams(window.location.search);

        // Dữ liệu từ server
        const selectedRegion = '@Html.Raw((Model.Region ?? "").Normalize())'.trim();
        const selectedSalaryId = '@Model.SalaryRangeId';
        const selectedExperienceId = '@Model.ExperienceLevelId';

        const regionButtonsHtml = `
            <div id="regionButtons" class="d-flex gap-2 flex-wrap">
                <a class="btn ${selectedRegion === "" ? "btn-custom-selected" : "btn-outline-secondary"}" href="?filter=region&region=">Ngẫu nhiên</a>
                <a class="btn ${selectedRegion === "Bắc" ? "btn-custom-selected" : "btn-outline-secondary"}" href="?filter=region&region=Bắc">Miền Bắc</a>
                <a class="btn ${selectedRegion === "Trung" ? "btn-custom-selected" : "btn-outline-secondary"}" href="?filter=region&region=Trung">Miền Trung</a>
                <a class="btn ${selectedRegion === "Nam" ? "btn-custom-selected" : "btn-outline-secondary"}" href="?filter=region&region=Nam">Miền Nam</a>
            </div>
        `;

        const salaryOptions = [
            { text: "Tất cả", value: "" },
            { text: "Dưới 10 triệu", value: 1 },
            { text: "Từ 10-15 triệu", value: 2 },
            { text: "Từ 15-20 triệu", value: 3 },
            { text: "Từ 25-30 triệu", value: 4 },
            { text: "Trên 30 triệu", value: 5 }
        ];

        const experienceOptions = [
            { text: "Tất cả", value: "" },
            { text: "Không có kinh nghiệm", value: 1 },
            { text: "Dưới 1 năm", value: 2 },
            { text: "1 năm", value: 3 },
            { text: "2 năm", value: 4 },
            { text: "3 năm", value: 5 },
            { text: "4 năm", value: 6 },
            { text: "5 năm", value: 7 }
        ];

        function renderOptionButtons(options, paramName, selectedId) {
            let html = `<div class="d-flex gap-2 flex-wrap">`;
            options.forEach(opt => {
                const isSelected = (opt.value == selectedId || (opt.value === "" && !selectedId));
                const btnClass = isSelected ? "btn btn-custom-selected px-3" : "btn btn-outline-secondary px-3";

                const params = new URLSearchParams(window.location.search);
                if (opt.value === "") {
                    params.delete(paramName);
                } else {
                    params.set(paramName, opt.value);
                }

                html += `<a class="${btnClass}" href="?${params.toString()}">${opt.text}</a>`;
            });
            html += `</div>`;
            dynamicFilters.innerHTML = html;
        }

        function setActiveMenuItem(type) {
            filterMenu.querySelectorAll('.dropdown-item').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.value === type);
            });
        }

        function loadFilterArea(type) {
            if (type === "region") {
                dynamicFilters.innerHTML = regionButtonsHtml;
            } else if (type === "salary") {
                renderOptionButtons(salaryOptions, "salaryRangeId", selectedSalaryId);
            } else if (type === "experience") {
                renderOptionButtons(experienceOptions, "experienceLevelId", selectedExperienceId);
            }
        }

        filterToggle.addEventListener("click", function (e) {
            e.stopPropagation();
            const isOpen = filterMenu.classList.toggle("show");
            filterToggle.classList.toggle("open", isOpen);
        });

        filterMenu.querySelectorAll(".dropdown-item").forEach(btn => {
            btn.addEventListener("click", function (e) {
                e.preventDefault();
                const type = this.dataset.value;
                selectedLabel.textContent = this.childNodes[0].textContent.trim();
                filterMenu.classList.remove("show");
                filterToggle.classList.remove("open");
                setActiveMenuItem(type);
                urlParams.set("filter", type);
                history.replaceState(null, '', `${window.location.pathname}?${urlParams.toString()}`);
                loadFilterArea(type);
            });
        });

        document.addEventListener("click", function (e) {
            if (!filterToggle.contains(e.target) && !filterMenu.contains(e.target)) {
                filterMenu.classList.remove("show");
                filterToggle.classList.remove("open");
            }
        });

        // Khởi tạo ban đầu
        let activeFilter = urlParams.get('filter') || 'region';
        const mapLabel = { region: 'Địa điểm', salary: 'Mức lương', experience: 'Kinh nghiệm' };
        selectedLabel.textContent = mapLabel[activeFilter];
        setActiveMenuItem(activeFilter);
        loadFilterArea(activeFilter);
    });
</script>


</html>