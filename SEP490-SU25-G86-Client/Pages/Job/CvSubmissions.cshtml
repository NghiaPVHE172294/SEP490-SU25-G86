@page
@{
    var jwtToken = HttpContext.Session.GetString("jwt_token");
}
<script>
    // Lưu token vào localStorage nếu chưa có (chỉ thực hiện khi trang load)
    const serverToken = '@jwtToken';
    if (serverToken && !localStorage.getItem('jwt_token')) {
        localStorage.setItem('jwt_token', serverToken);
    }
</script>
@model SEP490_SU25_G86_Client.Pages.Job.CvSubmissionsModel
@{
    ViewData["Title"] = "Danh sách CV đã nộp";
}
<h2>Danh sách CV đã nộp vào tin tuyển dụng</h2>
@if (!string.IsNullOrEmpty(Model.JobPostTitle))
{
    <div class="mb-3">
        <strong>Tin tuyển dụng:</strong> @Model.JobPostTitle
        @if (!string.IsNullOrEmpty(Model.CompanyName))
        {
            <span> | <strong>Công ty:</strong> @Model.CompanyName</span>
        }
    </div>
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}
@if (Model.CvSubmissions != null && Model.CvSubmissions.Any())
{
    <table class="table table-bordered table-hover mt-3">
        <thead class="table-light">
            <tr>
                <th>STT</th>
                <th>Tên ứng viên</th>
                <th>File CV</th>
                <th>Ngày nộp</th>
                <th>Trạng thái</th>
                <th>Điểm phù hợp</th>
                <th>Ghi chú</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < Model.CvSubmissions.Count; i++)
        {
            var cv = Model.CvSubmissions[i];
            <tr>
                <td>@(i+1)</td>
                <td>@cv.CandidateName</td>
                <td>
                    @if (!string.IsNullOrEmpty(cv.CvFileUrl))
                    {
                        <a href="@cv.CvFileUrl" target="_blank">Xem CV</a>
                    }
                </td>
                <td>@(cv.SubmissionDate?.ToString("dd/MM/yyyy HH:mm") ?? "")</td>
                <td>@cv.Status</td>
                <td>
                    <span id="score-@cv.SubmissionId">@((cv.TotalScore?.ToString("0.##")) ?? "-")</span>
                    <span id="spinner-@cv.SubmissionId" class="spinner-border spinner-border-sm text-warning" style="display:none"></span>
                </td>
                <td>@cv.RecruiterNote</td>
                <td>
@if (cv.Status == "ĐÃ DUYỆT" || cv.Status == "ĐÃ TỪ CHỐI")
{
    <div class="action-disabled">
        <button type="button" class="btn btn-warning btn-sm me-1" disabled>Lọc CV bằng AI</button>
        <button type="button" class="btn btn-success btn-sm me-1" disabled>Duyệt CV</button>
        <button type="button" class="btn btn-danger btn-sm" disabled>Từ chối CV</button>
    </div>
}
else
{
    @if (cv.Status == "Đã chấm điểm bằng AI")
    {
        <button type="button" class="btn btn-warning btn-sm me-1" disabled>Lọc CV bằng AI</button>
    }
    else
    {
        <button type="button" class="btn btn-warning btn-sm me-1" onclick="aiFilter(@cv.SubmissionId, @Model.JobPostId, '@cv.CvParsedDataId', '@cv.JobCriteriaId')">Lọc CV bằng AI</button>
    }
    <form method="post" asp-page-handler="Approve" asp-route-id="@cv.SubmissionId" style="display:inline">
        <input type="hidden" name="JobPostId" value="@Model.JobPostId" />
        <button type="submit" class="btn btn-success btn-sm me-1">Duyệt CV</button>
    </form>
    <form method="post" asp-page-handler="Reject" asp-route-id="@cv.SubmissionId" style="display:inline">
        <input type="hidden" name="JobPostId" value="@Model.JobPostId" />
        <button type="submit" class="btn btn-danger btn-sm">Từ chối CV</button>
    </form>
}
</td>
            </tr>
        }
        </tbody>
    </table>
}
else if (string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-info mt-3">Chưa có CV nào được nộp vào tin tuyển dụng này.</div>
} 
<style>
.action-disabled {
    opacity: 0.5;
    pointer-events: none;
    display: flex;
    gap: 0.25rem;
}
</style>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script>
async function aiFilter(submissionId, jobPostId, cvParsedDataId, jobCriteriaId) {
    // Ẩn điểm, hiện spinner
    document.getElementById('score-' + submissionId).style.display = 'none';
    document.getElementById('spinner-' + submissionId).style.display = 'inline-block';
    try {
        // Gọi API AI filter (endpoint backend đang dùng)
        const token = localStorage.getItem('jwt_token') || sessionStorage.getItem('jwt_token');
        const resp = await fetch('https://localhost:7004/api/AI/CompareCvWithJobCriteria', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                ...(token ? { 'Authorization': 'Bearer ' + token } : {})
            },
            body: JSON.stringify({ cvParsedDataId, jobCriteriaId })
        });
        if (!resp.ok) throw new Error("Lọc AI thất bại");
        const data = await resp.json();
        // Giả sử backend trả về totalScore, nếu không thì cần reload lại trang hoặc fetch lại từng submission
        if (data && data.totalScore !== undefined && data.totalScore !== null) {
            document.getElementById('score-' + submissionId).innerText = Number(data.totalScore).toFixed(2);
        } else {
            // Nếu không có điểm, reload trang để lấy dữ liệu mới
            location.reload();
        }
    } catch (e) {
        alert(e.message || "Có lỗi khi lọc AI");
    }
    // Hiện lại điểm, ẩn spinner
    document.getElementById('score-' + submissionId).style.display = 'inline';
    document.getElementById('spinner-' + submissionId).style.display = 'none';
}
</script>